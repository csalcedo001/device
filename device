#!/usr/bin/env python3

import click
import json
import os
import pathlib

root_path = pathlib.Path(__file__).parent.absolute()
devices_json_path = os.path.join(root_path, "devices.json")


def load_devices():
	with open(devices_json_path) as input_json:
		devices = json.load(input_json)
	
	return devices

def save_devices(devices):
	with open(devices_json_path, "w") as output_json:
		json.dump(devices, output_json)


if not os.path.exists(devices_json_path):
	save_devices({})


### Main CLI

@click.group()
def cli():
	pass



### Device list manipulation commands
	
@click.group()
def add():
	pass

@click.command()
@click.argument("name")
@click.argument("ip", nargs=-1)
def ssh(name, ip):
	devices = load_devices()
	
	if name in devices:
		click.echo("Device named '{}' already exists.".format(name))
		return

	ips = list(ip)

	device_description = {
		"type": "ssh",
		"ips": ips
	}

	devices[name] = device_description

	save_devices(devices)

@click.command()
@click.argument("name")
@click.option("--container", help="Container name")
def docker(name, container):
	devices = load_devices()
	
	if name in devices:
		click.echo("Device named '{}' already exists.".format(name))
		return

	if container == None:
		container = name

	device_description = {
		"type": "docker",
		"container": container
	}

	devices[name] = device_description

	save_devices(devices)

add.add_command(ssh)
add.add_command(docker)


@click.command()
@click.argument("name")
def rm(name):
	devices = load_devices()

	if name not in devices:
		click.echo("error: No device named '{}' found.".format(name))
		return

	del devices[name]

	save_devices(devices)




### Device list observation commands
@click.command()
def ls():
	devices = load_devices()

	click.echo("List of available devices:")
	for name in devices:
		click.echo("* {}: type={}".format(name, devices[name]["type"]))
	
	click.echo()




### Device list observation commands
@click.command()
@click.argument("name")
@click.argument("attribute")
def info(name, attribute):
	devices = load_devices()

	if name not in devices:
		click.echo("error: No device named '{}' found.".format(name))
		return
	
	if attribute != 'attributes' and attribute not in devices[name]:
		click.echo("error: No attribute '{}' for device '{}' of type '{}'.".format(attribute, name, devices[name]['type']))
		return
	
	if attribute == 'attributes':
		value = list(devices[name].keys())
	else:
		value = devices[name][attribute]
		
	if type(value) == list:
		value = '\n'.join(value)

	click.echo(value)



# Connection commands
@click.command()
@click.argument("name")
def connect(name):
	devices = load_devices()

	if name not in devices:
		click.echo("No device named '{}' found.".format(name))
		return

	device_type = devices[name]["type"]
	
	if device_type == "ssh":
		command = "ssh " + " -t ssh ".join(devices[name]["ips"])
	elif device_type == "docker":
		command = "docker_connect.sh {}".format(devices[name]["container"])

	click.echo("Connecting to '{}'...".format(name))
	os.system(command)
	


@click.command()
@click.argument("name")
@click.argument("port")
def tunnel(name, port):
	devices = load_devices()

	if name not in devices:
		click.echo("No device named '{}' found.".format(name))
		return

	device_type = devices[name]["type"]

	if device_type == "ssh":
		ssh_command = "ssh -L {0}:localhost:{0} ".format(port)
		command = ssh_command + (" -t " + ssh_command).join(devices[name]["ips"])

	click.echo("Tunneling to '{}' through port '{}'...".format(name, port))
	os.system(command)


@click.command()
@click.argument("source")
@click.argument("dest")
@click.option("-r", "--recursive", is_flag=True, default=False)
def cp(source, dest, recursive):
	source_parts = source.split(":")
	if len(source_parts) > 2:
		click.echo("error: Invalid source {}.".format(source))
		return

	dest_parts = dest.split(":")
	if len(dest_parts) > 2:
		click.echo("error: Invalid destination {}.".format(dest))
		return

	
	devices = load_devices()
	
	if len(source_parts) == 1 or not source_parts[0] in devices:
		source_path = source
	else:
		device = devices[source_parts[0]]

		if device["type"] == "docker":
			click.echo("error: copy command for device of type 'docker' is not supported.")
			return

		if len(device["ips"]) > 1:
			click.echo("error: copy command for multiple IPs is not supported.")
			return

		source_path = device["ips"][0] + ":" + source_parts[1]
	
	if len(dest_parts) == 1 or not dest_parts[0] in devices:
		dest_path = dest
	else:
		device = devices[dest_parts[0]]

		if device["type"] == "docker":
			click.echo("error: copy command for device of type 'docker' is not supported.")
			return

		if len(device["ips"]) > 1:
			click.echo("error: copy command for multiple IPs is not supported.")
			return

		dest_path = device["ips"][0] + ":" + dest_parts[1]
	
	flags = ""
	if recursive:
		flags += "-r "

	command = "scp {} {} {}".format(flags, source_path, dest_path)

	os.system(command)

cli.add_command(add)
cli.add_command(rm)
cli.add_command(ls)
cli.add_command(info)
cli.add_command(connect)
cli.add_command(tunnel)
cli.add_command(cp)


if __name__ == '__main__':
	cli()

#!/usr/bin/env python3

import click
import json
import os


### Main CLI

@click.group()
def cli():
	pass



### Device list manipulation commands
	
@click.group()
def add():
	pass

@click.command()
@click.argument("name")
@click.argument("ip", nargs=-1)
def ssh(name, ip):
	ips = list(ip)
	with open("devices.json") as input_json:
		devices = json.load(input_json)
	
	if name in devices:
		click.echo("Device named '{}' already exists.".format(name))
		return

	device_description = {
		"type": "ssh",
		"ips": ips
	}

	devices[name] = device_description

	with open("devices.json", "w") as output_json:
		json.dump(devices, output_json)

add.add_command(ssh)

@click.command()
@click.argument("name")
def rm(name):
	with open("devices.json") as input_json:
		devices = json.load(input_json)

	if name not in devices:
		click.echo("No device named '{}' found.".format(name))
		return

	del devices[name]

	with open("devices.json", "w") as output_json:
		json.dump(devices, output_json)




### Device list observation commands
@click.command()
def ls():
	with open("devices.json", "r") as input_json:
		devices = json.load(input_json)

	click.echo("List of available devices:")
	for name in devices:
		click.echo("* {}: type={}".format(name, devices[name]["type"]))
	
	click.echo()




# Connection commands
@click.command()
@click.argument("name")
def connect(name):
	with open("devices.json", "r") as input_json:
		devices = json.load(input_json)

	if name not in devices:
		click.echo("No device named '{}' found.".format(name))
		return
	
	if device_type == "ssh":
		command = "ssh " + " -t ssh ".join(devices[name]["ips"])

	click.echo("Connecting to '{}'...".format(name))
	os.system(command)
	


@click.command()
@click.argument("name")
@click.argument("port")
def tunnel(name, port):
	with open("devices.json", "r") as input_json:
		devices = json.load(input_json)

	if name not in devices:
		click.echo("No device named '{}' found.".format(name))
		return

	device_type = devices[name]["type"]

	if device_type == "ssh":
		ssh_command = "ssh -L {0}:localhost:{0} ".format(port)
		command = ssh_command + (" -t " + ssh_command).join(devices[name]["ips"])

	click.echo("Tunneling to '{}' through port '{}'...".format(name, port))
	os.system(command)


cli.add_command(add)
cli.add_command(rm)
cli.add_command(ls)
cli.add_command(connect)
cli.add_command(tunnel)


if __name__ == '__main__':
	cli()

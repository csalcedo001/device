#!/usr/bin/env python3

import click
import json
import os
import pathlib

root_path = os.path.join(str(pathlib.Path.home()), ".dv")
devices_json_path = os.path.join(root_path, "devices.json")


### Loading data

def load_devices():
    with open(devices_json_path) as input_json:
        devices = json.load(input_json)

    return devices

def save_devices(devices):
    with open(devices_json_path, "w") as output_json:
        json.dump(devices, output_json)



def get_devices_match(ctx, args, incomplete):
    return [k for k in load_devices().keys() if incomplete in k]



### Useful functions

def command_quote_nest(command, quote='"'):
    bs = '\\'   # Backslash
    command = command.replace(bs, bs + bs)
    command = command.replace(quote, bs + quote)
    command = quote + command + quote
    return command

# def val_device(devices, name):
#     if name not in devices:
#         click.echo("No device named '{}' found.".format(name))
#         exit()


### Command functions

def build_ssh_command(name, ip, port=None, subcommand=None):
    command = "echo 'Connecting to {}...'; ssh ".format(name)
    if port is not None:
        command += "-L {0}:localhost:{0} ".format(port)
    command += "{} ".format(ip)
    if subcommand is not None:
        command += "-t {}".format(command_quote_nest(subcommand, quote='"'))
    return command


### Referencing

def resolve_reference(ref, force_connection=False, has_path=False):
    devices = load_devices()

    # Get types
    refs = ref.split(':')
    types = []
    other_i = None
    for ref in refs:
        types.append(devices[ref]["type"] if ref in devices else "other")
        if other_i == None and types[-1] == "other":
            other_i = len(types) - 1

    if "other" in types and not force_connection and (not has_path or (has_path and other_i != len(types) - 1)):
        raise Exception("error: No device named '{}' found. If this is a URL and want to reference it, run with the flag -f.".format(refs[other_i]))

    if ("ssh" in types or "other" in types) and "docker" in types:
        raise Exception("error: Connection through mixed IP and docker container is not supported.", err=True)
    
    if "docker" in types and len(types) > 1:
        raise Exception("error: Connection through 2 or more docker containers is not supported.", err=True)
    

    # Get names and ips from types
    names = []
    ips = []
    for i, ref in enumerate(refs):
        if types[i] != "other":
            key = "ips" if types[i] == "ssh" else "container"
            names += devices[ref][key][:-1]
            names.append(ref)
            ips += devices[ref][key]
        else:
            names.append(ref)
            ips.append(ref)

    # Reverse lists
    names = names[::-1]
    ips = ips[::-1]

    return names, types, ips



### Main CLI

@click.group()
def cli():
    pass



### Device list manipulation commands
    
@click.group()
def add():
    pass

@click.command()
@click.argument("name", type=click.STRING, autocompletion=get_devices_match)
@click.argument("ip", nargs=-1)
def ssh(name, ip):
    devices = load_devices()
    
    if name in devices:
        raise Exception("error: Device named '{}' already exists.".format(name))

    ips = list(ip)

    device_description = {
        "type": "ssh",
        "ips": ips
    }

    devices[name] = device_description

    save_devices(devices)

@click.command()
@click.argument("name", type=click.STRING, autocompletion=get_devices_match)
@click.option("--container", help="Container name")
def docker(name, container):
    devices = load_devices()
    
    if name in devices:
        raise Exception("Device named '{}' already exists.".format(name))

    if container == None:
        container = name

    device_description = {
        "type": "docker",
        "container": container
    }

    devices[name] = device_description

    save_devices(devices)


@click.command()
@click.argument("name", type=click.STRING, autocompletion=get_devices_match)
def rm(name):
    devices = load_devices()

    if name not in devices:
        raise Exception("error: No device named '{}' found.".format(name))

    if click.confirm("Are you sure you want to remove device '{}'?".format(name), default=None):
        click.echo("Removed device '{}'".format(name))

        del devices[name]

    save_devices(devices)




### Device list observation commands
@click.command()
def ls():
    devices = load_devices()

    names = list(devices.keys())
    names.sort()

    click.echo("List of available devices:")
    
    for name in names:
        click.echo("* {}: type={}".format(name, devices[name]["type"]))
    
    click.echo()




### Device list observation commands
@click.command()
@click.argument("name", type=click.STRING, autocompletion=get_devices_match)
@click.argument("attribute")
def info(name, attribute):
    devices = load_devices()

    if name not in devices:
        raise Exception("error: No device named '{}' found.".format(name))
    
    if attribute != 'attributes' and attribute not in devices[name]:
        raise Exception("error: No attribute '{}' for device '{}' of type '{}'.".format(attribute, name, devices[name]['type']))
    
    if attribute == 'attributes':
        value = list(devices[name].keys())
    else:
        value = devices[name][attribute]
        
    if type(value) == list:
        value = '\n'.join(value)

    click.echo(value)



# Connection commands
@click.command()
@click.argument("name", type=click.STRING, autocompletion=get_devices_match)
@click.option("-f", "--force-connection", is_flag=True, default=False)
@click.option("-p", "--port", default=None)
def connect(name, force_connection, port):
    devices = load_devices()
    names, types, ips = resolve_reference(name, force_connection)

    if "ssh" in types or "other" in types:
        command = build_ssh_command(names[0], ips[0], port=port)

        for i in range(1, len(ips)):
            command = build_ssh_command(names[i], ips[i], port=port, subcommand=command)

    elif "docker" in types:
        command = "docker_connect.sh {}".format(devices[names[0]]["container"])

    os.system(command)


@click.command()
@click.argument("source")
@click.argument("dest")
@click.option("-r", "--recursive", is_flag=True, default=False)
def cp(source, dest, recursive):
    source_parts = source.split(":")
    if len(source_parts) > 2:
        raise Exception("error: Invalid source {}.".format(source))

    dest_parts = dest.split(":")
    if len(dest_parts) > 2:
        raise Exception("error: Invalid destination {}.".format(dest))

    
    devices = load_devices()
    
    flags = ""
    if recursive:
        flags += "-r "
    
    if len(source_parts) == 1 or not source_parts[0] in devices:
        source_path = source
    else:
        device = devices[source_parts[0]]

        if device["type"] == "docker":
            raise Exception("error: copy command for device of type 'docker' is not supported.")

        source_path = device["ips"][-1] + ":" + source_parts[1]
        if len(device["ips"]) == 1:
            pass
        elif len(device["ips"]) == 2:
            proxy_command = "-oProxyCommand=\"ssh -W %h:%p "
            proxy_command += device["ips"][0]
            proxy_command += "\" "
            
            flags += proxy_command
        else:
            raise Exception("error: copy command for more than 2 IPs is not supported.")

    
    if len(dest_parts) == 1 or not dest_parts[0] in devices:
        dest_path = dest
    else:
        device = devices[dest_parts[0]]

        if device["type"] == "docker":
            raise Exception("error: copy command for device of type 'docker' is not supported.")

        dest_path = device["ips"][-1] + ":" + dest_parts[1]
        if len(device["ips"]) == 1:
            pass
        elif len(device["ips"]) == 2:
            proxy_command = "-oProxyCommand=\"ssh -W %h:%p "
            proxy_command += device["ips"][0]
            proxy_command += "\" "
            
            flags += proxy_command
        else:
            raise Exception("error: copy command for more than 2 IPs is not supported.")

    command = "scp {} {} {}".format(flags, source_path, dest_path)

    os.system(command)

@click.command()
@click.argument("old")
@click.argument("new")
def rename(old, new):
    devices = load_devices()

    if old not in devices:
        raise Exception("error: No device named '{}' found.".format(old))

    if new in devices and new != old:
        raise Exception("error: Device named '{}' already exists.".format(new))
    
    if new != old:
        devices[new] = devices[old]
        del devices[old]

        save_devices(devices)

@click.command()
@click.argument("name", type=click.STRING, autocompletion=get_devices_match)
@click.argument("cmd", type=click.STRING)
def run(name, cmd):
    devices = load_devices()

    if name not in devices:
        raise Exception("error: No device named '{}' found.".format(name))

    # if '"' in cmd:
    #     raise Exception("error: No support for commands that contain '\"'. Use \"'\" if possible.")

    command = 'ssh -t '
    command += devices[name]["ips"][0] + ' '
    command += cmd

    os.system(command)
    


### Add all commands
add.add_command(ssh)
add.add_command(docker)

cli.add_command(add)
cli.add_command(rm)
cli.add_command(ls)
cli.add_command(info)
cli.add_command(connect)
cli.add_command(cp)
cli.add_command(rename)
cli.add_command(run)


if __name__ == '__main__':
    if not os.path.exists(root_path):
        os.mkdir(root_path)
    if not os.path.exists(devices_json_path):
        save_devices({})
        
    try:
        cli()
    except Exception as e:
        click.echo(e)